/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.35
 * Generated at: 2016-07-13 20:28:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mainpage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\r\n");
      out.write("<title>Photo gallery</title>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\timg {\r\n");
      out.write("    \tmax-width:800px;\r\n");
      out.write("\t}\r\n");
      out.write("\t#picture {\r\n");
      out.write("\t\tmargin-top:10px;\r\n");
      out.write("\t}\r\n");
      out.write("\tbody {\r\n");
      out.write("\t\tbackground-color: #e5eaf7;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container-fluid text-center\">\r\n");
      out.write("\t<h2 class=\"text-center\">\r\n");
      out.write("\t\tFollowing photo tags are present in gallery\r\n");
      out.write("\t\t</h2>\r\n");
      out.write("\t\t<div class=\"tagButtons text-center\" id=\"tagButtons\">&nbsp;</div>\r\n");
      out.write("\t\t<div class=\"text-center\" id=\"tagThumbnails\">&nbsp;</div>\r\n");
      out.write("\t\t<div class=\"col-lg-7\" id=\"picture\">&nbsp;</div>\r\n");
      out.write("\t\t<div class=\"col-lg-5\" id=\"descriptionmessage\">&nbsp;</div>\r\n");
      out.write("\t\t<div class=\"col-lg-5\" id=\"description\">&nbsp;</div>\r\n");
      out.write("\t\t<div class=\"col-lg-5\" id=\"tagsmessage\">&nbsp;</div>\r\n");
      out.write("\t\t<div class=\"col-lg-5\" id=\"tags\">&nbsp;</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.0.0/jquery.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tfunction clearImage() {\r\n");
      out.write("\t\t\t$(\"#picture\").html(\"&nbsp;\");\r\n");
      out.write("\t\t\t$(\"#descriptionmessage\").html(\"&nbsp;\");\r\n");
      out.write("\t\t\t$(\"#description\").html(\"&nbsp;\");\r\n");
      out.write("\t\t\t$(\"#tagsmessage\").html(\"&nbsp;\");\r\n");
      out.write("\t\t\t$(\"#tags\").html(\"&nbsp;\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$(document).ready(\r\n");
      out.write("\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t$.get({\r\n");
      out.write("\t\t\t\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\t\t\t\turl : \"tags\",\r\n");
      out.write("\t\t\t\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t\t\t\tvar content = \"\";\r\n");
      out.write("\t\t\t\t\t\t\t$.each(data, function(key, value) {\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent += \"<span class='tagbutton'><input class='btn btn-default' type=\\\"button\\\" id=\" + value\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ \" value=\" + value\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ \" onclick=\\\"retrieve(this.id)\\\" /></span>\";\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#tagButtons\").html(content);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tfunction retrieve(id) {\r\n");
      out.write("\t\t\tclearImage();\r\n");
      out.write("\t\t\t$.get(\"thumbnails?tag=\" + id, function(data) {\r\n");
      out.write("\t\t\t\tvar content = \"\"\r\n");
      out.write("\t\t\t\t$.each(data, function(key, value) {\r\n");
      out.write("\t\t\t\t\tcontent += \"<img class='img-thumbnail' id='\" + value + \"' src='showthumbnail?name=\"\r\n");
      out.write("\t\t\t\t\t\t\t+ value + \"' onclick='retrieveFull(this.id)'/>\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t$(\"#tagThumbnails\").html(content);\r\n");
      out.write("\t\t\t}, \"json\")\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction retrieveFull(id) {\r\n");
      out.write("\t\t\t$(\"#picture\").html(\"<img class='img-rounded' src='showpicture?name=\" + id + \"'>\");\r\n");
      out.write("\t\t\tconsole.log(\"nesto\");\r\n");
      out.write("\t\t\t$.get(\"pictureinfo?name=\" + id, function(data) {\r\n");
      out.write("\t\t\t\tvar content = data;\r\n");
      out.write("\t\t\t\tvar tagstext = \"\";\r\n");
      out.write("\t\t\t\t$(\"#descriptionmessage\").html(\"<h3>Picture description</h3>\");\r\n");
      out.write("\t\t\t\t$(\"#description\").html(content[0]);\r\n");
      out.write("\t\t\t\t$.each(content[1], function(key, value) {\r\n");
      out.write("\t\t\t\t\ttagstext += \"<span class='label label-info' id='picturetag'>\" + value + \"</span>\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t$(\"#tagsmessage\").html(\"<h3>Tags associated with the picture</h3>\");\r\n");
      out.write("\t\t\t\t$(\"#tags\").html(tagstext);\r\n");
      out.write("\t\t\t}, \"json\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
