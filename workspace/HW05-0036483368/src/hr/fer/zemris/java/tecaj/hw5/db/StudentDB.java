package hr.fer.zemris.java.tecaj.hw5.db;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;

import hr.fer.zemris.java.tecaj.hw5.parser.QueryParserException;
import hr.fer.zemris.java.tecaj.hw5.utilities.QueryFilter;

/**
 * Demonstration program for querying a simple database. Running this program
 * you are directly to connected to database and ready to execute queries.
 * 
 * @author Marin Jurjevic
 *
 */
public class StudentDB {
	/**
	 * database consisting info about students
	 */
	private static StudentDatabase database;

	/**
	 * storage of filtered student records , generated by query
	 */
	private static List<StudentRecord> filteredRecords;

	/**
	 * student record generated by indexquery command
	 */
	private static StudentRecord indexQueryRecord;

	/**
	 * length of JMBAG, constant value
	 */
	private final static int JMBAG_LENGTH = 10;

	/**
	 * width of biggest last name in the output table
	 */
	private static int widestLastName;

	/**
	 * width of biggest first name in the output table
	 */
	private static int widestFirstName;

	/**
	 * Starting method of program.
	 * 
	 * @param args command line arguments (none are used)
	 * @throws IOException
	 *             if file databse cannot be load from external text file
	 */
	public static void main(String[] args) throws IOException {
		database = loadDatabase("database.txt");

		Scanner sc = new Scanner(System.in);
		while (true) {
			boolean sucess = false;
			try {
				System.out.println("> ");

				if (readInput(sc) == false) {
					break;
				}
				sucess = true;

			} catch (IllegalArgumentException e) {
				System.out.println(e.getMessage());
			} catch (QueryParserException e) {
				System.out.println(e.getMessage());
			}

			if (!sucess) {
				System.out.println("Please try again:");
			}
		}

		System.out.println("Goodbye.");

	}

	/**
	 * 
	 * @param path
	 *            path to external database file
	 * @return new instance of operatible StudentDatabase class
	 * @throws IOException
	 *             if an I/O error occurs reading from the file or a malformed
	 *             or unmappable byte sequence is read
	 */
	private static StudentDatabase loadDatabase(String path) throws IOException {
		List<String> lines = Files.readAllLines(Paths.get(path), StandardCharsets.UTF_8);

		return new StudentDatabase(lines);
	}

	private static boolean readInput(Scanner sc) {
		String input = sc.nextLine();
		if (input.trim().equalsIgnoreCase("EXIT")) {	// exit
			return false;
		}

		String[] ar = input.split("\\s+", 2);

		if (ar.length < 2) {
			throw new IllegalArgumentException("Syntax error: invalid input");
		}

		String command = ar[0].trim();	// query or indexquery
		String query = ar[1].trim();	// content of query

		if (command.equals("indexquery")) {
			executeIndexQuery(query);
		} else if (command.equals("query")) {
			executeQuery(query);
		} else {
			throw new IllegalArgumentException("No such command!");
		}

		return true;
	}

	/**
	 * Executes query command.
	 * 
	 * @param text
	 *            all text after "query" keyword
	 */
	private static void executeQuery(String text) {
		QueryFilter qFilter = new QueryFilter(text);

		filteredRecords = database.filter(qFilter);

		widestLastName = widestFirstName = 0;
		
		// count width of first and last name columns for proper formatting
		for (StudentRecord r : filteredRecords) {
			if (r.getFirstName().length() > widestFirstName) {
				widestFirstName = r.getFirstName().length();
			}
			if (r.getLastName().length() > widestLastName) {
				widestLastName = r.getLastName().length();
			}
		}
		
		if (filteredRecords.isEmpty()) {
			System.out.println("There are no matching results for this query%n.");
			return;
		}
		
		printTable();
	}

	/**
	 * Executes indexquery command.
	 * 
	 * @param text
	 *            all text after "indexquery" command
	 */
	private static void executeIndexQuery(String text) {
		if (!text.startsWith("jmbag")) {
			throw new IllegalArgumentException("Invalid attribut name in indexquery!");
		}
		text = text.substring(5).trim();
		if (!text.startsWith("=")) {
			throw new IllegalArgumentException("Invalid operator name in indexquery!");
		}
		text = text.substring(1).trim();

		if (!text.startsWith("\"") && !text.endsWith("\"")) {
			throw new IllegalArgumentException("Invalid expression. Jmbag must be written in literals!");
		}

		String jmbag = text.replace("\"", "");

		indexQueryRecord = database.forJMBAG(jmbag);
		
		if (indexQueryRecord == null) {
			System.out.println("There is no such JMBAG in the database.");
			return;
		}
		
		// print record
		widestFirstName = indexQueryRecord.getFirstName().length();
		widestLastName = indexQueryRecord.getLastName().length();
		printRecord();
		
	}

	/**
	 * Prints out single record , if there is any, upon calling indexquery
	 * command.
	 */
	private static void printRecord() {
		String frame = getFrame();
		System.out.println(frame);
		System.out.println(getFormattedLine(indexQueryRecord));
		System.out.println(frame);

		System.out.println("Records selected: " + 1);
		System.out.println();
	}

	/**
	 * Prints out all results that query command generates if there are any.
	 */
	private static void printTable() {
		String frame = getFrame();
		System.out.println(frame);
		for (StudentRecord record : filteredRecords) {
			System.out.println(getFormattedLine(record));
		}
		System.out.println(frame);

		System.out.println("Records selected: " + filteredRecords.size());
		System.out.println();
	}

	/**
	 * Calculates frame of the table and returns it as help construct for
	 * building the whole table.
	 * 
	 * @return returns one frame representing row delimiter
	 */
	private static String getFrame() {
		StringBuilder sb = new StringBuilder();

		int i = 0;
		sb.append("+");
		while (i < JMBAG_LENGTH + 2) {
			sb.append("=");
			i++;
		}
		sb.append("+");
		i = 0;
		while (i < widestLastName + 2) {
			sb.append("=");
			i++;
		}
		sb.append("+");
		i = 0;
		while (i < widestFirstName + 2) {
			sb.append("=");
			i++;
		}
		sb.append("+===+");

		return sb.toString();
	}

	/**
	 * Formats info from one record to fit in the table.
	 * 
	 * @param record
	 *            student record
	 * @return one line of the table with the info from the record
	 */
	private static String getFormattedLine(StudentRecord record) {
		StringBuilder sb = new StringBuilder();

		int firstNameLength = record.getFirstName().length();
		int lastNameLength = record.getLastName().length();

		sb.append("| ");
		sb.append(record.getJmbag());
		sb.append(" | ");
		sb.append(record.getLastName());

		int i = 0;
		while (i < widestLastName - lastNameLength) {
			sb.append(" ");
			i++;
		}
		sb.append(" | ");
		sb.append(record.getFirstName());

		i = 0;
		while (i < widestFirstName - firstNameLength) {
			sb.append(" ");
			i++;
		}
		sb.append(" | ");
		sb.append(record.getFinalGrade());
		sb.append(" |");

		return sb.toString();
	}
}
